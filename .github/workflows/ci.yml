name: ci

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

defaults:
  run:
    # NOTE: Default option does not include `-o pipefail` as documented
    # unless explicitly specifying the `bash` shell.
    # https://github.com/actions/runner/issues/353
    shell: bash

permissions:
  id-token: write

jobs:
  lint:
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    env:
      # NOTE: Dependabot updates will fail if `engine-strict`
      # is enabled so we explicitly enforce this in CI
      # https://github.com/dependabot/dependabot-core/issues/4072
      NPM_CONFIG_ENGINE_STRICT: 'true'

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4.1.2

      - name: Set up Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      # NOTE: Due to EBADPLATFORM bug affecting NPM workspaces,
      # we use the `--force` flag to sidestep the warning
      # https://github.com/npm/cli/issues/6138
      - name: Install dependencies
        run: |
          npm ci --force

      - name: Run linter checks
        run: |
          npm run lint

      - name: Run formatting checks
        run: |
          npm run fmt:check

  build:
    needs:
      - lint
    runs-on: ubuntu-22.04
    timeout-minutes: 3
    env:
      # NOTE: Dependabot updates will fail if `engine-strict`
      # is enabled so we explicitly enforce this in CI
      # https://github.com/dependabot/dependabot-core/issues/4072
      NPM_CONFIG_ENGINE_STRICT: 'true'

    steps:
      - name: Checkout branch
        uses: actions/checkout@v4.1.2

      - name: Set up Node
        uses: actions/setup-node@v4.0.2
        with:
          node-version-file: '.nvmrc'
          cache: 'npm'

      # NOTE: Due to EBADPLATFORM bug affecting NPM workspaces,
      # we use the `--force` flag to sidestep the warning
      # https://github.com/npm/cli/issues/6138
      - name: Install dependencies
        run: |
          npm ci --force

      - name: Build packages
        run: |
          npm run build

      - name: Generate release tarball
        run: |
          npm pack --workspaces

      # TODO: Consider using custom verdaccio image
      - name: Upload local registry config
        uses: actions/upload-artifact@v4.3.1
        with:
          name: registry-config
          path: docker-compose.yml
          retention-days: 3

      - name: Upload release tarball
        uses: actions/upload-artifact@v4.3.1
        with:
          name: release
          path: '*.tgz'
          retention-days: 3

  test-local-tarball:
    needs:
      - build
    runs-on: ${{ matrix.os }}
    timeout-minutes: 3
    strategy:
      matrix:
        os:
          - ubuntu-22.04
          - macos-12
          - macos-14 # ARM64
          - windows-2022

    steps:
      - name: Set up Node
        uses: actions/setup-node@v4.0.2

      - name: Download release tarball
        uses: actions/download-artifact@v4.1.7
        with:
          name: release

      - name: Set up test package
        run: |
          npm init --yes

      - name: Install base package
        run: |
          npm install k6-cli-*.tgz

      - name: Install optional package for Linux x64
        if: ${{ runner.os == 'Linux' && runner.arch == 'x64' }}
        run: |
          npm install loozhengyuan-k6-linux-x64-*.tgz

      - name: Install optional package for Linux ARM64
        if: ${{ runner.os == 'Linux' && runner.arch == 'ARM64' }}
        run: |
          npm install loozhengyuan-k6-linux-arm64-*.tgz

      - name: Install optional package for macOS x64
        if: ${{ runner.os == 'macOS' && runner.arch == 'x64' }}
        run: |
          npm install loozhengyuan-k6-darwin-x64-*.tgz

      - name: Install optional package for macOS ARM64
        if: ${{ runner.os == 'macOS' && runner.arch == 'ARM64' }}
        run: |
          npm install loozhengyuan-k6-darwin-arm64-*.tgz

      - name: Install optional package for Windows x64
        if: ${{ runner.os == 'Windows' && runner.arch == 'x64' }}
        run: |
          npm install loozhengyuan-k6-win32-x64-*.tgz

      - name: Verify installation
        run: |
          npx k6 version

  test-local-registry:
    needs:
      - build
    runs-on: ubuntu-22.04
    timeout-minutes: 3

    steps:
      - name: Set up Node
        uses: actions/setup-node@v4.0.2

      - name: Download release tarball
        uses: actions/download-artifact@v4.1.7
        with:
          name: release

      # TODO: Consider using custom verdaccio image
      - name: Download local registry config
        uses: actions/download-artifact@v4.1.7
        with:
          name: registry-config

      - name: Prepare config for unauthenticated publish
        run: |
          cat <<EOF > .npmrc
          registry=http://localhost:4873/
          //localhost:4873/:_authToken=fake
          EOF

      # NOTE: The `verdaccio` image can only be configured to allow
      # anonymous publish via config file and GH Actions service
      # containers can only modify env vars so the alternative is to
      # use Docker Compose to spin up service containers instead.
      # https://docs.github.com/en/actions/using-containerized-services/about-service-containers
      # https://stackoverflow.com/q/69852476
      - name: Start service containers
        run: |
          docker compose up --force-recreate --wait

      - name: Publish packages
        run: |
          npm publish --registry http://localhost:4873 k6-cli-*.tgz
          npm publish --registry http://localhost:4873 loozhengyuan-k6-linux-x64-*.tgz
          npm publish --registry http://localhost:4873 loozhengyuan-k6-linux-arm64-*.tgz
          npm publish --registry http://localhost:4873 loozhengyuan-k6-darwin-x64-*.tgz
          npm publish --registry http://localhost:4873 loozhengyuan-k6-darwin-arm64-*.tgz
          npm publish --registry http://localhost:4873 loozhengyuan-k6-win32-x64-*.tgz

      - name: Set up test package
        run: |
          npm init --yes

      - name: Install packages
        run: |
          npm install --verbose --registry http://localhost:4873 k6-cli

      - name: Verify installation
        run: |
          npx k6 version

      - name: Display logs
        if: ${{ !cancelled() }}
        run: |
          docker compose logs

  publish:
    needs:
      - test-local-tarball
      - test-local-registry
    runs-on: ubuntu-22.04
    timeout-minutes: 3

    steps:
      - name: Set up Node
        uses: actions/setup-node@v4.0.2
        with:
          # Sets up .npmrc with `NODE_AUTH_TOKEN` token
          registry-url: https://registry.npmjs.org/

      - name: Download release tarball
        uses: actions/download-artifact@v4.1.7
        with:
          name: release

      # TODO: Remove dry run flag when ready
      - name: Publish packages
        if: ${{ github.ref == 'refs/heads/main' }}
        env:
          NODE_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          npm publish --provenance --access public --dry-run loozhengyuan-k6-0.0.0.tgz
          npm publish --provenance --access public --dry-run loozhengyuan-k6-linux-x64-0.0.0.tgz
          npm publish --provenance --access public --dry-run loozhengyuan-k6-linux-arm64-0.0.0.tgz
          npm publish --provenance --access public --dry-run loozhengyuan-k6-darwin-x64-0.0.0.tgz
          npm publish --provenance --access public --dry-run loozhengyuan-k6-darwin-arm64-0.0.0.tgz
          npm publish --provenance --access public --dry-run loozhengyuan-k6-win32-x64-0.0.0.tgz
